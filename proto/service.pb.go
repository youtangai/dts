// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileData struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Mode                 int32    `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileData) Reset()         { *m = FileData{} }
func (m *FileData) String() string { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()    {}
func (*FileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_10ffb5c8e48623b8, []int{0}
}
func (m *FileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileData.Unmarshal(m, b)
}
func (m *FileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileData.Marshal(b, m, deterministic)
}
func (dst *FileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileData.Merge(dst, src)
}
func (m *FileData) XXX_Size() int {
	return xxx_messageInfo_FileData.Size(m)
}
func (m *FileData) XXX_DiscardUnknown() {
	xxx_messageInfo_FileData.DiscardUnknown(m)
}

var xxx_messageInfo_FileData proto.InternalMessageInfo

func (m *FileData) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileData) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Response struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_10ffb5c8e48623b8, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*FileData)(nil), "FileData")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	FileTransfer(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_FileTransferClient, error)
}

type fileTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferServiceClient(cc *grpc.ClientConn) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) FileTransfer(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_FileTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransferService_serviceDesc.Streams[0], "/FileTransferService/FileTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceFileTransferClient{stream}
	return x, nil
}

type FileTransferService_FileTransferClient interface {
	Send(*FileData) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileTransferServiceFileTransferClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceFileTransferClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferServiceFileTransferClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
type FileTransferServiceServer interface {
	FileTransfer(FileTransferService_FileTransferServer) error
}

func RegisterFileTransferServiceServer(s *grpc.Server, srv FileTransferServiceServer) {
	s.RegisterService(&_FileTransferService_serviceDesc, srv)
}

func _FileTransferService_FileTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).FileTransfer(&fileTransferServiceFileTransferServer{stream})
}

type FileTransferService_FileTransferServer interface {
	SendAndClose(*Response) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type fileTransferServiceFileTransferServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceFileTransferServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferServiceFileTransferServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileTransfer",
			Handler:       _FileTransferService_FileTransfer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_10ffb5c8e48623b8) }

var fileDescriptor_service_10ffb5c8e48623b8 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x0e, 0x82, 0x30,
	0x14, 0x45, 0xad, 0x0a, 0x81, 0x17, 0x5c, 0x6a, 0x62, 0x08, 0x13, 0xe9, 0xd4, 0x89, 0x41, 0x3f,
	0xc0, 0xc5, 0x38, 0x3a, 0x54, 0x7f, 0xe0, 0x29, 0x8f, 0x84, 0x04, 0x28, 0xe9, 0xab, 0x7e, 0xbf,
	0xa1, 0x8a, 0x71, 0xbb, 0xf7, 0x0e, 0xe7, 0x1e, 0xd8, 0x30, 0xb9, 0x57, 0xfb, 0xa0, 0x6a, 0x74,
	0xd6, 0x5b, 0x75, 0x81, 0xe4, 0xdc, 0x76, 0x74, 0x42, 0x8f, 0xb2, 0x80, 0xa4, 0x69, 0x3b, 0x1a,
	0xb0, 0xa7, 0x5c, 0x94, 0x42, 0xa7, 0xe6, 0xd7, 0xa5, 0x84, 0x75, 0x6f, 0x6b, 0xca, 0x97, 0xa5,
	0xd0, 0x91, 0x09, 0x79, 0xda, 0x6a, 0xf4, 0x98, 0xaf, 0x4a, 0xa1, 0x33, 0x13, 0xb2, 0x52, 0x90,
	0x18, 0xe2, 0xd1, 0x0e, 0x4c, 0x72, 0x07, 0x31, 0x7b, 0xf4, 0x4f, 0x0e, 0xb4, 0xc8, 0x7c, 0xdb,
	0xfe, 0x08, 0xdb, 0xe9, 0xf3, 0xe6, 0x70, 0xe0, 0x86, 0xdc, 0xf5, 0x23, 0x24, 0x35, 0x64, 0xff,
	0xb3, 0x4c, 0xab, 0xd9, 0xac, 0x48, 0xab, 0x19, 0xaa, 0x16, 0x5a, 0xdc, 0xe3, 0xe0, 0x7e, 0x78,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x16, 0xc0, 0xfe, 0x5b, 0xcc, 0x00, 0x00, 0x00,
}
